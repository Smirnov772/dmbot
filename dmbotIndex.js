const {adminUser, userCommands} = require('./constants.js');
const fs = require('fs');
const {GoogleSpreadsheet} = require('google-spreadsheet');
const CallCenter = require('./models/call–°enter.js');
const axios = require('axios');
const {OpenWeatherAPI} = require('openweather-api-node');
const menuConfig = require('./menuConfig');
let weather = new OpenWeatherAPI({
	key: 'd0e8ff4cbaf8ddb831a6b5ca69c4f362', locationName: 'Bekasovo', units: 'metric', language: 'ru'
});
const textMap = require('./textMap');

const {
	main,
	getGooglePhoneauth,
	setGoogleUserId,
	setGoogleUserNumberId,
	searchUserID,
	searchOnboadging,
	setReviewsGoogleSheets,
	setOprosGoogleSheets
} = require('./conrollers/googleAuth.js');
require('dotenv').config();
// const { main, list } = require("./sheets.js");
// const list1 = []
const schedule = require('node-schedule');
// let timerOnbording;
// let job;
// let weatherTimer;

const Phone = require('./models/authPhone.js');
const mongoose = require('mongoose');
const {
	getUsers, createUsers, adminMiddleware, loggerMiddleware, getUsersLength, sendUserMessageLength, getUsersMessageLength
} = require('./conrollers/users.js');
const {sendPhone, deletePhoneAndUsers} = require('./conrollers/phones.js');
const {Telegraf, Markup, Composer, Scenes, session} = require('telegraf');
const {message} = require('telegraf/filters');
const {
	TELEGRAM_API_TOKEN, dev_TELEGRAM_API_TOKEN, MONGOBASE, GPT_TOKEN
} = process.env;
const {Configuration, OpenAIApi} = require('openai');
const call–°enter = require('./models/call–°enter.js');
const e = require('express');
const configuration = new Configuration({
	apiKey: GPT_TOKEN
});
const openai = new OpenAIApi(configuration);

const bot = new Telegraf(TELEGRAM_API_TOKEN, {
	polling: {
		interval: 300, autoStart: true
	}
});
const userLiveMiddleware = async (ctx, next) => {
	try {

		if (ctx.chat.type === 'private') {
			return next();
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		const botMember = await ctx.getChatMember(ctx.botInfo.id).catch(() => null);

		// –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω - –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å
		if (!botMember || ['left', 'kicked'].includes(botMember.status)) {
			console.log(`–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã ${ctx.chat?.title || 'unknown'}`);
			return;
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
		await Promise.race([
			ctx.reply(`–£–¥–∞–ª–∏ –±–æ—Ç–∞ ${ctx.chat.title} ü§¨`),
			new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))]);

	} catch (error) {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
		switch (true) {
			case error instanceof Error && error.message === 'Timeout':
				console.error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
				break;

			case error.response?.error_code === 403:
				console.log('–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
				break;

			case error.response?.parameters?.migrate_to_chat_id:
				this.handleGroupMigration(error);
				break;

			case error.response?.error_code === 400:
				console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
				break;

			default:
				console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
				Sentry.captureException(error); // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Sentry
		}
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
	return;
};
bot.use(userLiveMiddleware);

const listQuestions = [];
const inlineBtn = (btn) => Markup.inlineKeyboard(btn);
mongoose.connect(MONGOBASE);
main().then(async (e) => {
	// await listQuestions.splice(0);
	e.filter(async (e) => {
		await listQuestions.push(e);
	});
});

const uniqueResult = [];
const searchButton = (ctx, next) => {
	uniqueResult.splice(0);
	const filteredQuestions = listQuestions.filter((question) => {
		return (question.category3 === ctx.message.text || question.category2 === ctx.message.text || question.category1 ===
				ctx.message.text || question.questions === ctx.message.text);
	});
	const uniqueCategories = Array.from(new Set(filteredQuestions.map((question) => {
		if (question.category3 === ctx.message.text) {
			uniqueResult.push(question.category2);
			return question.questions;
		} else if (question.category2 === ctx.message.text) {
			if (question.category3) {
				uniqueResult.push(question.category2);
				return question.category3;
			} else if (question.questions) {
				return question.questions;
			} else if (question.answer) {
				return question.answer;
			} else {
				return next();
			}
		} else if (question.category1 === ctx.message.text) {
			if (question.category2) {
				uniqueResult.push(question.category1);
				return question.category2;
			} else if (question.category3) {
				return question.category3;
			} else if (question.questions) {
				return question.questions;
			} else if (question.answer) {
				return next();
			} else {
				return next();
			}
		} else if (question.questions === ctx.message.text) {
		} else {
			return next();
		}
	})));
	if (uniqueCategories[0] !== undefined) {
		const keyboard = [...uniqueCategories, '–í–µ—Ä–Ω—É—Ç—å—Å—è'];
		ctx.replyWithHTML('...', Markup.keyboard(keyboard).resize());
	} else {
		return next();
	}
};

const res4 = listQuestions.map((e) => {
	return [Markup.button.callback(e.category)];
});
const registerWizardScene = new Composer();
registerWizardScene.on('callback_query', async (ctx) => {
	ctx.wizard.state.data = {};
	await ctx.reply('–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
	return ctx.wizard.next();
});

const inputNumberWizardScene = new Composer();
inputNumberWizardScene.on('text', async (ctx) => {
	try {
		ctx.wizard.state.data.number = ctx.message.text;
		const result = ctx.message.text.replace(/[^0-9\s]/g, '').replace(/^[78]\s?|(?<=\s)[78]/g, '');
// console.log(ctx)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		// if (Phone.findOne({phone: result})) {
		await createUsers(ctx, {
			name: ctx.from.id, phone: result, message: 0
		});

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await bot.telegram.setMyCommands(userCommands, {
			scope: {type: 'chat', chat_id: ctx.from.id}
		});

	} catch (error) {
		console.error('–û—à–∏–±–∫–∞:', error);
		ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
	}
});

const inputMessageAnswerHandler = new Composer();

inputMessageAnswerHandler.on('text', async (ctx) => {

	await call–°enter.find({userMessageId: contextID.userMessageId}).
			find().
			then((question) => {
				question[0].admin.forEach(
						(admin) => bot.telegram.editMessageText(`${admin.AdminID}`, `${admin.adminMessageId}`, {
							inline_message_id: false
						}, `–ù–∞ –≤–æ–ø—Ä–æ—Å: ¬´${contextID.text}¬ª\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${contextID.ID} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:\n${ctx.message.text}`));
			});
	await bot.telegram.sendMessage(contextID.ID, `–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å ¬´${contextID.text}¬ª\n–æ—Ç–≤–µ—Ç–∏–ª–∏:\n${ctx.message.text}`);
	await call–°enter.findOneAndDelete({userMessageId: contextID.userMessageId});
	startMenu(ctx);
	await ctx.scene.leave();
});

const menuScene = new Scenes.WizardScene('sceneWizard', registerWizardScene, inputNumberWizardScene);
const setPhone = new Scenes.WizardScene('sceneSetphone', (ctx) => {
	ctx.wizard.state.data = {};
	ctx.reply('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');
	return ctx.wizard.next();
}, (ctx) => {
	const regex = /[^0-9\s]/g; // –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
	const result = ctx.message.text.replace(regex, ''); // —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	const regex2 = /^[78]\s?|(?<=\s)[78]/g; // –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã "7" –∏ "8" –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
	const result2 = result.replace(regex2, ''); // —É–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	const re = /\s/; // –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
	const mas = result2.split(re); // —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–∞—Å—Å–∏–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤

	sendPhone(ctx, mas);

});
const delPhone = new Scenes.WizardScene('sceneDelphone', async (ctx) => {
	ctx.wizard.state.data = {};
	await ctx.reply('–î–ª—è —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ');
	return ctx.wizard.next();
}, async (ctx) => {
	const result = ctx.message.text.replace(/[^0-9\s]/g, '').
			replace(/^[78]\s?|(?<=\s)[78]/g, '');
	const mas = result.split(/\s/);
	await deletePhoneAndUsers(ctx, mas);
});
const sendMessageAll = new Scenes.WizardScene('sceneSendMessageAll',

		async (ctx) => {
			try {
				const users = await getUsers();
				for (const user of users) {
					try {
						await bot.telegram.sendMessage(user.name, ctx.message.text);
					} catch (error) {
						console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name}: ${error.message}`);
					}
				}
			} catch (error) {
				console.error(error);
			} finally {
				ctx.scene.leave();
			}
		});
const sendMessageUserAnswer = new Scenes.WizardScene('sceneSendMessageUserAnswer',

		inputMessageAnswerHandler);
sendMessageAll.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è'));

const sendPhotoAll = new Scenes.WizardScene('sceneSendPhotoAll',

		async (ctx) => {
			try {
				if (ctx.message.photo) {
					const users = await getUsers();
					console.log('photo');
					for (const user of users) {
						try {
							await bot.telegram.sendPhoto(user.name, ctx.message.photo[0].file_id);
							if (ctx.message.caption) {
								await bot.telegram.sendMessage(user.name, ctx.message.caption);
							}
						} catch (error) {
							console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
						}
					}
					await ctx.scene.leave();
				} else if (ctx.message.animation) {
					console.log('animation');
					const users = await getUsers();
					for (const user of users) {
						try {
							await bot.telegram.sendAnimation(user.name, ctx.message.animation.file_id);
							if (ctx.message.caption) {
								await bot.telegram.sendMessage(user.name, ctx.message.caption);
							}
						} catch (error) {
							console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
						}
					}
					await ctx.scene.leave();
				} else if (ctx.message.video) {
					console.log('video');
					const users = await getUsers();
					for (const user of users) {
						try {
							await bot.telegram.sendVideoNote(user.name, ctx.message.video.file_id);
							if (ctx.message.caption) {
								await bot.telegram.sendMessage(user.name, ctx.message.caption);
							}
						} catch (error) {
							console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
						}
					}
					await ctx.scene.leave();
				}
			} catch (error) {
				console.error(error);
				ctx.scene.leave();
			}
		});

sendPhotoAll.enter((ctx) => ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ'));

const sendReview = new Scenes.WizardScene('sceneSendReview', (ctx) => {
			ctx.deleteMessage();
			ctx.reply(
					'üëç–û—Ç–ª–∏—á–Ω–æ!, —è –∑–∞–¥–∞–º —Ç–µ–±–µ 4 –≤–æ–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—à—å—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.\n\n–ü–æ–µ—Ö–∞–ª–∏!üöÄ\n\n–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?',
					Markup.removeKeyboard());
			return ctx.wizard.next();
		}, (ctx) => {
			if (ctx.message && ctx.message.text) {
				const messageText = ctx.message.text;
				ctx.reply('–ö–∞–∫ –ø—Ä–æ—à–ª–æ –æ–±—É—á–µ–Ω–∏–µ, –≤—Å–µ –ª–∏ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ?');
				ctx.wizard.state.data = {text1: messageText};
				console.log(ctx.wizard.state.data);
				return ctx.wizard.next();
			} else {
				ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞');
				ctx.scene.leave();
			}
		}, (ctx) => {
			if (ctx.message && ctx.message.text) {
				const messageText = ctx.message.text;
				ctx.reply('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –∏ –∫–æ–ª–ª–µ–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã?');
				ctx.wizard.state.data.text2 = messageText;
				console.log(ctx.wizard.state.data);
				return ctx.wizard.next();
			} else {
				ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞');
				ctx.scene.leave();
			}
		}, (ctx) => {
			if (ctx.message && ctx.message.text) {
				const messageText = ctx.message.text;
				const date = getFormattedDate(ctx.message.date);
				ctx.reply('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥–µ?');
				ctx.wizard.state.data.text3 = messageText;
				ctx.wizard.state.data.date = date;
				console.log(ctx.wizard.state.data);
				return ctx.wizard.next();
			} else {
				ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞');
				ctx.scene.leave();
			}
		}, (ctx) => {
			if (ctx.message && ctx.message.text) {
				const messageText = ctx.message.text;

				ctx.wizard.state.data.text4 = messageText;

				ctx.reply('–£–∫–∞–∂–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏–ª —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ', Markup.inlineKeyboard([
					[
						Markup.button.callback('–°–æ–∑–æ–Ω–æ–≤ –ú–∞–∫—Å–∏–º', (ctx.wizard.state.data.text5 = '–°–æ–∑–æ–Ω–æ–≤ –ú–∞–∫—Å–∏–º'))], [
						Markup.button.callback('–ù–∏–∫–æ–ª–∞–µ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è', (ctx.wizard.state.data.text5 = '–ù–∏–∫–æ–ª–∞–µ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è'))],

					[
						Markup.button.callback('–ë—É–±–ª–∏–∫–æ–≤ –ê–Ω–¥—Ä–µ–π', (ctx.wizard.state.data.text5 = '–ë—É–±–ª–∏–∫–æ–≤ –ê–Ω–¥—Ä–µ–π'))], [
						Markup.button.callback('–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å', (ctx.wizard.state.data.text5 = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))]]));
				return ctx.wizard.next();
			} else {
				ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞');
				ctx.scene.leave();
			}

			return ctx.wizard.next();
		}, (ctx) => {
			ctx.deleteMessage();
			ctx.reply('–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –æ—Ç 1 –¥–æ 5', Markup.inlineKeyboard([
				[Markup.button.callback('1', (ctx.wizard.state.data.text6 = '1'))],
				[Markup.button.callback('2', (ctx.wizard.state.data.text6 = '2'))],
				[Markup.button.callback('3', (ctx.wizard.state.data.text6 = '3'))],
				[Markup.button.callback('4', (ctx.wizard.state.data.text6 = '4'))],
				[Markup.button.callback('5', (ctx.wizard.state.data.text6 = '5'))],
				[
					Markup.button.callback('–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å', (ctx.wizard.state.data.text5 = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))]]));
			// (ctx.wizard.state.data.text5 = ctx.message.text);
			return ctx.wizard.next();
		},

		async (ctx) => {
			ctx.deleteMessage();
			ctx.reply('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è, –∂–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.');
			// ctx.wizard.state.data.text6 = ctx.message.text;
			console.log(ctx.wizard.state.data);

			setReviewsGoogleSheets(ctx.from.id, ctx.wizard.state.data.date, ctx.wizard.state.data.text1,
					ctx.wizard.state.data.text2, ctx.wizard.state.data.text3, ctx.wizard.state.data.text4,
					ctx.wizard.state.data.text5, ctx.wizard.state.data.text6);
			startMenu(ctx);
			ctx.scene.leave();
		});
sendReview.action('btnExit', (ctx) => {
	ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –ß—Ç–æ-—Ç–æ –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?');
	return ctx.scene.leave();
});

var contextID;
sendMessageUserAnswer.enter((ctx) => {
	contextID = ctx.state;
	console.log(ctx.state);

	ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
});
let question = '';
let answer1 = '';
let answer2 = '';

const setOprosScene = new Scenes.WizardScene('setOpros', (ctx) => {
	ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:');
	return ctx.wizard.next();
}, (ctx) => {
	question = ctx.message.text;
	ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:');
	return ctx.wizard.next();
}, (ctx) => {
	answer1 = ctx.message.text;
	ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:');
	return ctx.wizard.next();
}, (ctx) => {
	answer2 = ctx.message.text;
	ctx.reply('–í–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
	return ctx.scene.leave();
});

const setDocument = new Scenes.WizardScene('setDocument', (ctx) => {
	ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
	return ctx.wizard.next();
}, async (ctx) => {
	try {
		const fileId = ctx.message.document.file_id ? ctx.message.document.file_id : ctx.message.video.file_id;
		const file = await ctx.telegram.getFile(fileId);
		const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
		const response = await axios({
			url: fileUrl, method: 'GET', responseType: 'stream'
		});
		const writer = fs.createWriteStream(
				`./document/${ctx.message.document.file_name ? ctx.message.document.file_name : ctx.message.video.file_name}`);
		response.data.pipe(writer);
		writer.on('finish', async () => {
			ctx.reply(`–§–∞–π–ª: ${ctx.message.document.file_name ?
					ctx.message.document.file_name :
					ctx.message.video.file_name}\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);

			botFile(ctx.message.document.file_name ? ctx.message.document.file_name : ctx.message.video.file_name);
// –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
			const users = await getUsers();
			console.log(users);
			for (const user of users) {
				try {
					bot.telegram.sendMessage(user.name, `–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª:\n${ctx.message.document.file_name ?
							ctx.message.document.file_name :
							ctx.message.video.file_name}`, Markup.inlineKeyboard([
						Markup.button.callback('–ó–∞–≥—Ä—É–∑–∏—Ç—å', ctx.message.document.file_name)]));
				} catch (error) {
					console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name}: ${error.message}`);
				}
			}

		});
		writer.on('error', (err) => {
			ctx.reply(err);
		});
		return ctx.scene.leave();
	} catch (err) {
		ctx.reply(err);
	}
});

const stage = new Scenes.Stage([
	setDocument,
	setOprosScene,
	menuScene,
	setPhone,
	delPhone,
	sendMessageAll,
	sendPhotoAll,
	sendReview,
	sendMessageUserAnswer]);

bot.use(session());
bot.use(stage.middleware());

// Handle button clicks
bot.action('btnAnswer1', (ctx) => {
	setOprosGoogleSheets(ctx.from.id, `${answer1}`);
	// ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç");
	ctx.deleteMessage();
	ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç');
});

bot.action('btnAnswer2', (ctx) => {
	setOprosGoogleSheets(ctx.from.id, ` ${answer2}`);
	// ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç");
	ctx.deleteMessage();
	ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç');
});
const startMenu = (ctx) => {
	const uniqueCategories = [];
	const categoriesKeyboard = listQuestions.filter(
			(element) => !uniqueCategories.includes(element.category1) && uniqueCategories.push(element.category1)).
			map((e) => Markup.button.callback(e.category1));

	ctx.reply('.', Markup.keyboard(categoriesKeyboard).resize());
};

job = schedule.scheduleJob('0 0 15 * * 2', function(fireDate) {
	const blockUser = [];

	searchOnboadging().then((users) => {
		const promises = users.map((ID, index) => {
			console.log(ID);
			return new Promise((resolve, reject) => {
				setTimeout(async () => {
					try {
						await bot.telegram.sendMessage(ID,
								'üëã–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!',
								Markup.inlineKeyboard([
									[Markup.button.callback('‚úÖ–•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å', 'btnOkReview')], [
										Markup.button.callback('‚ùå–ù–µ —Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', 'btnNoneReview')]]));
						resolve();
					} catch (error) {
						blockUser.push(ID);
						reject(error);
					}
				}, index * 2000);
			});
		});

		Promise.allSettled(promises).
				then(() => bot.telegram.sendMessage('679238113', `–ù–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã:\n${blockUser.join('\n')}`)).
				catch((error) => console.error(error));
	});
});

bot.command('timer', (ctx) => {
	job = schedule.scheduleJob('*/5 * * * * *', function(fireDate) {
		console.log('–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ ' + fireDate + ', –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å –≤ ' + new Date());
		bot.telegram.sendMessage(ctx.chat.id,
				'–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ ' + fireDate + ', –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å –≤ ' + new Date());
	});
});

bot.command('test', (ctx) => {
	const blockUser = [];

	searchOnboadging().then((users) => {
		const promises = users.map((ID, index) => {
			console.log(ID);
			return new Promise((resolve, reject) => {
				setTimeout(async () => {
					try {
						await bot.telegram.sendMessage(ID,
								'üëã–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!',
								Markup.inlineKeyboard([
									[Markup.button.callback('‚úÖ–•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å', 'btnOkReview')], [
										Markup.button.callback('‚ùå–ù–µ —Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', 'btnNoneReview')]]));
						resolve();
					} catch (error) {
						blockUser.push(ID);
						reject(error);
					}
				}, index * 2000);
			});
		});

		Promise.allSettled(promises).
				then(() => bot.telegram.sendMessage('679238113', `–ù–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã:\n${blockUser.join('\n')}`)).
				catch((error) => console.error(error));
	});
});

bot.action('openMenu', (ctx) => startMenu(ctx));
bot.action('btnOkReview', (ctx) => ctx.scene.enter('sceneSendReview'));
bot.action('btnNoneReview', async (ctx) => {
	ctx.deleteMessage();
	ctx.reply('–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É —Ç–µ–±—è –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å');
});

bot.action('onb1', (ctx) => {
	const message = [
		'ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É!',
		'üß∏ –ö–æ–º–ø–∞–Ω–∏—è ¬´–î–µ—Ç—Å–∫–∏–π –º–∏—Ä¬ª - —ç—Ç–æ –∫—Ä—É–ø–Ω–∞—è —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å, –∑–∞–Ω–∏–º–∞—é—â–∞—è—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –¥–µ—Ç—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ –∏ –ë–µ–ª–∞—Ä—É—Å–∏.',
		'üßë‚Äçüíº –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–∫–ª–∞–¥–µ, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –≤ —Å–≤–æ–µ–π –æ—Ç—Ä–∞—Å–ª–∏.',
		'üßë‚Äçüíº –ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤!',
		'ü§ù –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ üëâ/questionsüëà. –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–æ–≤—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º¬ª –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.'];
	message.forEach(async (question, index) => {
		setTimeout(() => {
			ctx.reply(question);
		}, index * 5000);
	});
});

const generateMenu = (menu) => {
	return Markup.inlineKeyboard(menu.map((item) => {
		if (item.link) {
			return [Markup.button.url(item.label, item.link)];
		}
		return [Markup.button.callback(item.label, item.action)];
	}));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
async function handleMedia(ctx, type, filePath, caption = '', menuOptions = []) {
	console.log(ctx.match, caption, filePath, fs.existsSync(filePath));

	if (fs.existsSync(filePath)) {
		await ctx.editMessageReplyMarkup();
		const loadingMessage = await ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

		try {
			// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
			if (type === 'video') {
				await ctx.sendVideo({source: filePath, parse_mode: 'HTML'});
			} else if (type === 'photo') {

				await ctx.sendPhoto({
					source: filePath
				});
				if (caption) await ctx.sendMessage(caption, {parse_mode: 'Markdown'});
			}

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
			await ctx.deleteMessage(loadingMessage.message_id);

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
			if (menuOptions.length > 0) {
				await ctx.reply('–ú–µ–Ω—é', generateMenu(menuOptions));
			}
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ${type}:`, error);

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
			await ctx.deleteMessage(loadingMessage.message_id);
			await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ${type}.`);
		}
	} else {
		await ctx.reply(`–û—à–∏–±–∫–∞: ${type} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
bot.action(/SHOW_TEXT_(.*)/, (ctx) => {
	const action = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	const text = textMap[action]; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
	console.log('—Ç–µ–∫—Å—Ç', ctx.match);
	if (text) {
		ctx.editMessageText(text, {parse_mode: 'Markdown'}); // –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		ctx.reply('–ú–µ–Ω—é', generateMenu([{label: '–û—Ç–∫—Ä—ã—Ç—å', action: 'M_START_MENU'}])); // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é
	} else {
		ctx.editMessageText('–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
bot.action(/SHOW_VIDEO_(.*)/, async (ctx) => {
	const action = ctx.match[1];

	const filePath = `./document/${textMap[action]}`; // –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
	await handleMedia(ctx, 'video', filePath, '', [{label: '–û—Ç–∫—Ä—ã—Ç—å', action: 'M_START_MENU'}]);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
bot.action(/SHOW_IMAGE_(.*)/, async (ctx) => {
	const action = ctx.match[1];
	const filePath = `./images/${textMap[action]}`; // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
	await handleMedia(ctx, 'photo', filePath, textMap[action], [{label: '–û—Ç–∫—Ä—ã—Ç—å', action: 'M_START_MENU'}]);
});

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
bot.start((ctx) => {
	try {
		ctx.reply(menuConfig.startMessage, generateMenu(menuConfig.startMenu));
		bot.telegram.getMyCommands(userCommands, ctx.from.id);
	} catch (error) {
		console.error(error);
		ctx.reply('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
	}
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.action('REGISTRATION', userLiveMiddleware, (ctx) => {
	console.log('–ö–Ω–æ–ø–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –Ω–∞–∂–∞—Ç–∞');

	ctx.scene.enter('sceneWizard');
});
bot.action(/M_(.*)/, (ctx) => {
	const action = ctx.match[0]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	const menuItem = menuConfig.menus[action]; // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	console.log(menuItem);
	console.log(ctx.match[1]);
	if (menuItem) {
		if (menuItem.message) {
			// –ï—Å–ª–∏ –µ—Å—Ç—å message, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
			ctx.editMessageText(menuItem.message, generateMenu(menuItem.subMenu || []));
		} else if (menuItem.subMenu) {
			// –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
			const buttonWithText = menuItem.subMenu.find((item) => item.text);

			if (buttonWithText) {
				// –ï—Å–ª–∏ –≤ –ø–æ–¥–º–µ–Ω—é –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Å text, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
				ctx.editMessageText(buttonWithText.text, generateMenu(menuItem.subMenu));
			} else {
				// –ò–Ω–∞—á–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥–º–µ–Ω—é
				ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', generateMenu(menuItem.subMenu));
			}
		}
	} else {
		// –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
		ctx.editMessageText('–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
	}
});
bot.use(loggerMiddleware);
bot.command('admin', adminMiddleware, (ctx) => {
	console.log(ctx.from.id);
	if (adminUser.includes(`${ctx.from.id}`)) {
		ctx.reply(`–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üëá`, Markup.inlineKeyboard([
			[
				Markup.button.callback('üü¢–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'savePhone')],
			[
				Markup.button.callback('üî¥–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'deleteusers')],
			[
				Markup.button.callback('üó£Ô∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'message')],
			[
				Markup.button.callback('üèûÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º', 'photo')],
			[Markup.button.callback('üíæ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä', 'sendDocument')],
			[Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å', 'speedQuestion')],
			[
				Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'getuser')],
			[
				Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ –≥—É–≥–ª', 'best')],
			[Markup.button.callback('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã', 'BDrestart')]]).
				resize());
	} else {
		ctx.replyWithHTML(`you are not an admin!!!`);
	}
});
bot.action('speedQuestion', (ctx) => ctx.reply(`–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –≤–æ–ø—Ä–æ—Å—ã, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—åüëá`, Markup.inlineKeyboard([
	[Markup.button.callback('1. –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã', 'savePhone')],
	[Markup.button.callback('2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –æ–ø—Ä–æ—Å', 'deleteusers')]]).
		resize()));
bot.action('savePhone', (ctx) => ctx.scene.enter('sceneSetphone'));
bot.action('sendDocument', (ctx) => ctx.scene.enter('setDocument'));
bot.action('deleteusers', (ctx) => ctx.scene.enter('sceneDelphone'));
bot.action('getuser', (ctx) => getUsersLength(ctx));
bot.action('BDrestart', (ctx) => {
	listQuestions.splice(0);
	main().then((e) => {
		e.filter((e) => {
			listQuestions.push(e);
		});
		ctx.reply('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ');
	});
});
bot.action('best', (ctx) => getUsersMessageLength(ctx));
bot.action('message', (ctx) => {
	ctx.scene.enter('sceneSendMessageAll');
});
bot.action('photo', (ctx) => {
	ctx.scene.enter('sceneSendPhotoAll');
});

bot.action('setopros', (ctx) => {
	ctx.scene.enter('setOpros');
});
// Define your action handler
bot.action('opros', async (ctx) => {
	// Send the question to all users of the bot
	const userIds = await searchUserID();
	userIds.forEach(async (userId) => {
		try {
			await bot.telegram.sendMessage(userId, question, Markup.inlineKeyboard([
				[Markup.button.callback(answer1, 'btnAnswer1')], [Markup.button.callback(answer2, 'btnAnswer2')]]));
		} catch (error) {
			console.log(`Error sending message to user ${userId}: ${error}`);
		}
	});
});

bot.command('questions', (ctx) => startMenu(ctx));
bot.command('ques', (ctx) => ctx.reply('–ü–æ–∫–∞', Markup.removeKeyboard()));

bot.hears('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ webApp', (ctx) => {
	ctx.sendMessage('üëá', Markup.inlineKeyboard([
		Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å', 'https://clck.ru/35bVun')]));
});

bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è', (ctx) => {
	const uniqueResult = [];
	const filteredList = listQuestions.filter((element) => {
		if (!uniqueResult.includes(element.category1)) {
			uniqueResult.push(element.category1);
			return element;
		}
	});
	const buttons = filteredList.map((e) => Markup.button.callback(e.category1));
	ctx.reply('...', Markup.keyboard(buttons).resize());
});

function getFormattedDate(timestamp) {
	var date = new Date(timestamp * 1000);
	var month = date.getMonth() + 1;
	var day = date.getDate();
	var hour = date.getHours();
	var min = date.getMinutes();
	var sec = date.getSeconds();

	month = (month < 10 ? '0' : '') + month;
	day = (day < 10 ? '0' : '') + day;
	hour = (hour < 10 ? '0' : '') + hour;
	min = (min < 10 ? '0' : '') + min;
	sec = (sec < 10 ? '0' : '') + sec;

	var str = day + '.' + month + '.' + date.getFullYear();
	// +
	// "_" +
	// hour +
	// ":" +
	// min +
	// ":" +
	// sec;
	console.log(str);
	/*alert(str);*/
	return str;
}

bot.command('time', (ctx) => {
	console.log(ctx.message.date);
	getFormattedDate(ctx.message.date);
});
bot.command('stop', (ctx) => {
	ctx.reply('–ü–æ–∫–∞', Markup.removeKeyboard());
});

bot.command('btnstart', (ctx) => {
	ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤.', inlineBtn(btnsetstart));
});
bot.command('stoptimeronbording', (ctx) => {
	if (timerOnbording) {
		timerOnbording.cancel();
	}
});
bot.command('stopreview', (ctx) => {
	if (job) {
		job.cancel();
	}
});
bot.command('stoptimerweather', (ctx) => {
	if (weatherTimer) {
		weatherTimer.cancel();
	}
});

// –ü–û–ò–°–ö –ü–û –°–û–û–ë–©–ï–ù–ò–Æ
const searchAnswerPressButton = (ctx, next) => {
	const foundQuestion = listQuestions.filter((list) => {
		if (list.questions.includes(ctx.message.text)) {
			return true;
		} else if (list.answer !== undefined && list.answer.includes(ctx.message.text)) {
			return true;
		} else {
			return false;
		}
	});

	if (foundQuestion.length > 0 && foundQuestion[0].answer.includes('_–¥–æ–∫—É–º–µ–Ω—Ç')) {
		try {
			foundQuestion[0].secondAnswer ? ctx.replyWithDocument({
				source: `./document/${foundQuestion[0].secondAnswer}`
			}) : ctx.reply(`–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
		} catch (error) {
			ctx.reply(`–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
		}
	} else {
		foundQuestion.length > 0 ? ctx.reply(foundQuestion[0].answer) : next();
	}
};

try {
	bot.on('text', searchButton, async (ctx) => {
		sendUserMessageLength(ctx);
		const keywords = await ctx.message.text.toLowerCase().split(' ');
		let result = [];

		// –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É —É—Å–ª–æ–≤–∏—é
		result = await listQuestions.filter((list) => {
			if (list.questions.includes(ctx.message.text)) {
				console.log(list);
				return true;
			}
		});

		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –≤—Ç–æ—Ä–æ–º—É —É—Å–ª–æ–≤–∏—é
		if (result.length === 0) {
			result = listQuestions.filter((list) => {
				const keylist = keywords.some((keyword) => {
					if (keyword.length >= 3 && list.teg.toLowerCase().
							split(' ').
							includes(keyword.toLowerCase())) {
						return true;
					}
				});

				return keylist;
			});
		}

		if (result.length >= 2) {
			const res2 = result.map((e) => {
				botAnswer(e);
				return [Markup.button.callback(e.questions, e.button)];
			});
			ctx.reply(`–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª. –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å`, Markup.inlineKeyboard(res2).resize());
		} else if (result.length === 1 && result[0].answer.includes('http')) {
			ctx.replyWithHTML(`–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É\nüëâ ${result[0].answer}`, {
				disable_web_page_preview: true
			});
		} else if (result.length === 1 && result[0].answer.includes('_–¥–æ–∫—É–º–µ–Ω—Ç')) {
			// Send file to the user
			const loadingMessage = await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
			try {
				const filePath = `./document/${result[0].secondAnswer}`;
				if (result[0].secondAnswer && fs.existsSync(filePath)) {
					ctx.replyWithDocument({
						source: filePath
					});
				} else {
					throw new Error('–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
				}
			} catch (error) {
				ctx.reply(error.message);
			} finally {
				ctx.deleteMessage(loadingMessage.message_id);
			}

		} else if (result.length === 1) {
			await ctx.replyWithHTML(`${result[0].answer}`, {
				disable_web_page_preview: true
			});
			if (result[0].secondAnswer && result[0].secondAnswer.trim() !== '' && result[0].secondAnswer !== '\n') {
				const result2 = await listQuestions.find((list) => {
					return list.questions.includes(result[0].secondAnswer);
				});
				await botAnswer(result2);
				await ctx.reply(`...`, Markup.inlineKeyboard([
					Markup.button.callback(result2.questions, result2.button)]).
						resize());
			} else console.log(false);
		} else {
			// const response = await openai.createCompletion({
			//   model: "text-davinci-003",
			//   prompt: `–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∫–æ–º–ø–∞–Ω–∏–∏, –º–µ–¥–≤–µ–¥—å –ø–æ –∏–º–µ–Ω–∏ –î—ë–º–∞ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ "–î–µ—Ç—Å–∫–∏–π –º–∏—Ä". –Ø —Ö–æ—á—É, —á—Ç–æ–±—ã –≤—ã –æ—Ç–≤–µ—á–∞–ª–∏, –∫–∞–∫ –º–µ–¥–≤–µ–¥—å –î—ë–º–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–Ω, –º–∞–Ω–µ—Ä—É –∏ –ª–µ–∫—Å–∏–∫—É, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±—ã –º–µ–¥–≤–µ–¥—å –î—ë–º–∞. –ù–µ –ø–∏—à–∏—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –û—Ç–≤–µ—Ç—å—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–µ–¥–≤–µ–¥—å –î—ë–º–∞. –í—ã –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å –≤—Å–µ –∑–Ω–∞–Ω–∏—è –º–µ–¥–≤–µ–¥—è –î—ë–º—ã. –ú–æ–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - "${ctx.message.text}". –∏—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –±–æ–ª—å—à–µ 30 —Å–ª–æ–≤.
			// `,
			//   temperature: 0.1,
			//   max_tokens: 300,
			// });
			await ctx.replyWithHTML(
					`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n–ó–∞–ø–∏—à—É –µ–≥–æ –∏ –æ—Ç–≤–µ—á—É –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω.`);
			try {
				await CallCenter.create({
					userId: ctx.from.id, question: ctx.message.text, userMessageId: ctx.message.message_id
				});
			} catch {
			}

			await adminUser.forEach(async (AdminID) => {
				try {
					const res = await bot.telegram.sendMessage(AdminID,
							`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n${ctx.message.text}`, Markup.inlineKeyboard([
								Markup.button.callback('–û—Ç–≤–µ—Ç–∏—Ç—å', `${ctx.message.message_id}`)]));

					await CallCenter.findOneAndUpdate({userMessageId: ctx.message.message_id}, {
						$addToSet: {
							admin: {
								AdminID: res.chat.id, adminMessageId: res.message_id
							}
						}
					});
					console.log(res.chat.id);
					botAnswerUser({
						userMessageId: `${ctx.message.message_id}`,
						ID: `${ctx.from.id}`,
						text: `${ctx.message.text}`,
						messageID: `${res.message_id}`,
						chatID: `${res.chat.id}`
					});
				} catch {
					console.error();
				}
			});
		}
	});
} catch (err) {
	console.error(err);
}
// –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í –æ—Ç –∫–Ω–æ–ø–∫–∏
const botAnswerUser = (props) => {
	bot.action(props.userMessageId, (ctx) => {
		ctx.state = props;
		const base = call–°enter.find({userMessageId: props.userMessageId}).
				find().
				then((question) => {
					question[0].admin.forEach(
							(admin) => bot.telegram.editMessageText(`${admin.AdminID}`, `${admin.adminMessageId}`, {
								inline_message_id: false
							}, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å`));
				});
		ctx.reply('...', Markup.removeKeyboard());
		ctx.scene.enter('sceneSendMessageUserAnswer');
	});
};
const botAnswer = (item) => {
	bot.action(item.button, async (ctx) => {
		try {
			await ctx.replyWithHTML(`${item.answer}`, {
				disable_web_page_preview: true
			});
		} catch (error) {
		}
	});
};

const botFile = (item) => {
	bot.action(item, async (ctx) => {
		const loadingMessage = await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
		try {
			const filePath = `./document/${item}`;
			if (fs.existsSync(filePath)) {
				ctx.replyWithDocument({
					source: filePath
				});
			} else {
				throw new Error('–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
			}
		} catch (error) {
			ctx.reply(error.message);
		} finally {
			ctx.deleteMessage(loadingMessage.message_id);
		}
	});
};

const getDocument = (item) => {
	bot.action(item.button, async (ctx) => {
		try {
			await ctx.replyWithHTML(`${item.answer}`, {
				disable_web_page_preview: true
			});
		} catch (error) {
		}
	});
};

bot.launch();
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
